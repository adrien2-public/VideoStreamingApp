
version: "3.9"


networks:
    mynetwork:
        driver: bridge

services:

  #######################################
  # Postgres: The database used by Kong
  #######################################
  kong-database:
    image: postgres:9.6
    container_name: kong-postgres
    restart: on-failure
    networks:
      - mynetwork
    environment:
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
      POSTGRES_DB: kong
    ports:
      - "5432:5432"
    volumes:
      - ./KongDB/postgresql:/var/lib/postgresql


  #######################################
  # Kong database migration
  #######################################
  kong-migration:
    image: kong
    command: kong migrations bootstrap
    networks:
      - mynetwork
    restart: on-failure
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
    depends_on:
      - kong-database

  #######################################
  # Kong: The API Gateway
  #######################################
  kong:
    image: kong
    restart: on-failure
    networks:
      - mynetwork
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_PROXY_LISTEN_SSL: 0.0.0.0:8443
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    depends_on:
      - kong-database
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8443:8443"
      - "8444:8444"






  account-db:
    container_name: account-db
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_DATABASE: 'accounts'
      MYSQL_USER: 'user'
      MYSQL_PASSWORD: 'password'
      # Password for root access
      MYSQL_ROOT_PASSWORD: 'password'
    ports:
      # <Port exposed> : < MySQL Port running inside container>
      - '3307:3306'
    expose:
      # Opens port 3306 on the container
      - '3307'
    volumes:
      - ./Account/mysql:/var/lib/mysql
    networks:
      - mynetwork
    depends_on:
      - kong-database



  video-db:
    container_name: video-db
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_DATABASE: 'videos'
      MYSQL_USER: 'user'
      MYSQL_PASSWORD: 'password'
      MYSQL_ROOT_PASSWORD: 'password'
    ports:
      - '3308:3306'
    expose:
      - '3308'
    volumes:
      - ./Videos/mysql:/var/lib/mysql
    networks:
      - mynetwork      
    depends_on:
      - kong-database



  messages-db:
    container_name: messages-db
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_DATABASE: 'messages'
      MYSQL_USER: 'user'
      MYSQL_PASSWORD: 'password'
      MYSQL_ROOT_PASSWORD: 'password'
    ports:
      - '3309:3306'
    expose:
      - '3309'
    volumes:
      - ./Messages/mysql:/var/lib/mysql
    networks:
      - mynetwork
    depends_on:
      - kong-database



  registration-db:
    container_name: registration-db
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_DATABASE: 'registration'
      MYSQL_USER: 'user'
      MYSQL_PASSWORD: 'password'
      MYSQL_ROOT_PASSWORD: 'password'
    ports:
      - '3310:3306'
    expose:
      - '3310'
    volumes:
      - ./Registration/mysql:/var/lib/mysql
    networks:
      - mynetwork
    depends_on:
      - kong-database


  message-server:
    container_name: message-server
    build:
        context: ./Messages
        dockerfile: Dockerfile
    ports:
      - "8502:8502"
    expose:
      - '8502'
    networks:
      - mynetwork
    depends_on:
      - messages-db


  account-server:
    container_name: account-server
    build:
        context: ./Account
        dockerfile: Dockerfile
    ports:
      - "8500:8500"
    expose:
      - '8500'
    networks:
      - mynetwork
    depends_on:
      - account-db 


  video-server:
    container_name: video-server
    build:
        context: ./Videos
        dockerfile: Dockerfile
    ports:
      - "8501:8501"
    expose:
      - '8501'
    networks:
      - mynetwork
    depends_on:
      - video-db
    volumes:
      - Videos:/Videos


  resources-server:
    container_name: resources-server
    build:
        context: ./Resources
        dockerfile: Dockerfile
    ports:
      - "8080:80"
    expose:
      - '8080'
    networks:
      - mynetwork
    depends_on:
      - video-db
    volumes:
      - Videos:/usr/local/apache2/Videos
    
 

  registration-server:
    container_name: registration-server
    build:
        context: ./Registration
        dockerfile: Dockerfile
    ports:
      - "8504:8504"
    expose:
      - '8504'
    networks:
      - mynetwork      
    depends_on:
      - registration-db
  

  login-server:
    container_name: login-server
    build:
        context: ./Login
        dockerfile: Dockerfile
    ports:
      - "8503:8503"
    expose:
      - '8503'
    networks:
      - mynetwork  


  angular-node:
    container_name:  angular-node
    build:
        context: ./AngularService
        dockerfile: Dockerfile
    ports:
      - "8080:80"
      - "8081:8081"
      - "8502:8502"
      - "4200:4200"     
    expose:
      - '8081'
      - "8080"
      - "4200"      
    networks:
      - mynetwork





volumes:
    Videos:



